@startuml iteracion1_VentaProductosLinea

' Enumeraciones
enum TipoPago {
    TARJETA_CREDITO
    TARJETA_DEBITO
    TRANSFERENCIA_BANCARIA
}

' Interfaces para el patr칩n Strategy
interface EstrategiaPago {
    + pagar(monto: double): void
}

' Clases abstractas
abstract class Usuario {
    - id: Long
    - nombre: String
    - correo: String
    - contrase침a: String
    + getId(): Long
    + getNombre(): String
    + getCorreo(): String
    + iniciarSesion(correo: String, contrase침a: String): boolean
    + recuperarContrase침a(correo: String): void
}

' Clases concretas de Usuario
class Cliente extends Usuario {
    + buscarProducto(palabraClave: String, categoria: String): List<Producto>
    + escogerProducto(producto: Producto): void
    + agregarProductoAlCarrito(producto: Producto): void
    + eliminarProductoDelCarrito(producto: Producto): void
    + realizarCompra(): Pedido
    + verTotalConDescuentos(): double
}

class Administrador extends Usuario {
    + agregarProducto(producto: Producto): void
    + actualizarProducto(producto: Producto): void
    + consultarHistorialVentas(): List<Pedido>
    + aplicarDescuentosAutomaticos(productos: List<Producto>): void
}

' Clase Producto
class Producto {
    - id: Long
    - nombre: String
    - descripcion: String
    - precio: double
    - stock: int
    - categoria: String
    - palabrasClave: List<String>
    + getId(): Long
    + getNombre(): String
    + getDescripcion(): String
    + getPrecio(): double
    + getStock(): int
    + setStock(stock: int): void
    + esDisponible(): boolean
}

' Clase Pedido
class Pedido {
    - id: Long
    - productos: List<Producto>
    - precioTotal: double
    - descuentos: List<Descuento>
    - estado: String
    + getId(): Long
    + getProductos(): List<Producto>
    + getPrecioTotal(): double
    + calcularPrecioTotal(): double
    + agregarDescuento(descuento: Descuento): void
    + getEstado(): String
    + setEstado(estado: String): void
}

' Clase Descuento
class Descuento {
    - id: Long
    - descripcion: String
    - valor: double
    + getId(): Long
    + getDescripcion(): String
    + getValor(): double
}

' Clase HistorialVentas
class HistorialVentas {
    - ventas: List<Pedido>
    + filtrarPorFecha(fechaInicio: Date, fechaFin: Date): List<Pedido>
    + exportarHistorial(formato: String): void
}

' Clases para el contexto y estrategias de pago
class ContextoPago {
    - estrategia: EstrategiaPago
    + setEstrategiaPago(estrategia: EstrategiaPago): void
    + pagar(monto: double): void
}

class PagoTarjetaCredito implements EstrategiaPago {
    + pagar(monto: double): void
}

class PagoTarjetaDebito implements EstrategiaPago {
    + pagar(monto: double): void
}

class PagoTransferenciaBancaria implements EstrategiaPago {
    + pagar(monto: double): void
}

' Relaciones de clases
Cliente --> Producto : "selecciona"
Cliente --> Pedido : "realiza"
Pedido --> Producto : "contiene"
Pedido --> HistorialVentas : "registrado en"
Administrador --> Producto : "gestiona"
Pedido --> Descuento : "aplica"
Administrador --> HistorialVentas : "consulta"
Pedido --> ContextoPago : "usa"
ContextoPago --> EstrategiaPago : "aplica"

@enduml